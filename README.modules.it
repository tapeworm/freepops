		README per il sistema di build dei moduli

** File nella directory dei moduli:
 
 bin/ 		binari prodotti dai moduli
 lib/ 		librerie prodotte dai moduli
 include/ 	interfacce prodotte dai moduli
 Makefile	target: all clean doc
 modules	lista dei moduli necessari per ogni target
 Doxyfile	file di configurazione di doxygen
 src/ 		i sorgenti dei moduli

** Policy per i moduli:

 ** Policy di building

 Ogni modulo deve includere nel makefile $(CONFIG) che definisce:

 CC, LD, AR, STRIP, RANLIB, HCC, HLD, HAR, HSTRIP, HRANLIB,
 CFLAGS, HCFLAGS, LDFLAGS, HLDFLAGS, EXEEXTENSION, STATICEXTENSION, 
 SHAREDEXTENSION, OS.

 Queste variabili devono essere usate come compilatore, linker, ecc.
 Il makefile del modulo viene anche chiamato definendo PREFIX, CONFIG e TARGET.

 Un file di un modulo puo' contenere una cosa del genere:
 
 #ifdef HAVE_CONFIG_H
 #	include "config.h"
 #endif
 
 per integrare le #define globali dei progetti, come
 VERSION e PROGRAMNAME e altre opzioni per la compilazione che non hanno a che 
 fare con la piattaforma ma solo con il software in se'.

 Il Makefile di ogni modulo deve avere questi target:

 all, clean.

 Il primo deve compilare e linkare lib$(TARGET)$(STATICEXTENSION) e copiarlo in 
 $(PREFIX)/lib ; poi copiare tutti i .h necessari in $(PREFIX)/include.
 Gli altri target sono banali.

 Ogni modulo deve essere registrato in /modules/src/sibscribed, e il
 giusto Makefile.template* verra' usato per compilarlo. Come caso speciale 
 un modulo puo' avere un Makefile ad-hoc, ma suggeriamo di usare i Makefile 
 di default.

 Makefile.template e' un makefile generico che puo' essere personalizzato 
 aggiungendo questi file alla directory dei moduli: source, interface, shared. 
 Il primo contiene i file .c che devono essere compilati, mentre il secondo 
 definisce il file .h che dovrebbe essere copiato in $(PREFIX)/include. Il 
 terzo contiene i flag -l per linkare la libreria condivisa. La libreria 
 condivisa viene compilata solo se questo file e' presente.

 Moduli di terze parti dovrebbero essere nel formato non modificato  
 module-version.tar.gz e possono essere patchati con una patch 
 module-version.diff presente nella stessa directory. Il 
 Makefile.template-contrib deve essere usato come Makefile. Vedi il modulo 
 lua per un esempio funzionante.

 Pacchetti speciali possono usare i propri Makefile. Questo e' utile in qualche 
 modulo speciale, ma indebolisce il sistema di build, quindi attenzione.

 ** Policy dei nomi

 Pacchetti con binding per Lua devono essere chiamati nomepacchetto_lua, cosi' 
 come pacchetti esclusivamente Lua (contenenti moduli .lua).

 ** Documentazione
 
 I moduli C devono essere documentati con doxygen.
 
 Un file .lua deve essere documentato nel modo luadoc.
 
 Un esempio di file lua commentato. Nota che i punti (.) alla fine della riga 
 sono importanti.

 <begin>
 ---
 -- description of the file, required in pkg files

 ---
 -- function brief.
 -- function long
 -- @param name type description,remember name can't be n.
 -- @return type description
 function prototype or defined value
 <end>

 Un binding fatto a mano non puo' essere documentato con il .lua, quindi 
 dovrai aggiungere un file .luadoc. Questo file e' un file lua documentato 
 che contiene solo i prototipi delle funzioni e la loro documentazione.

** COPYING

 Tutti i moduli nella directory modules hanno copyright secondo la licenza 
 GNU/GPL, eccetto quelli contenenti una specifica di licenza diversa.
 
** eof
