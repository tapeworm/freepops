#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\usepackage{graphicx}
\end_preamble
\language english
\inputencoding auto
\fontscheme bookman
\graphics default
\paperfontsize 12
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle fancy

\layout Title

FreePOPs Manual
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
newpage
\end_inset 


\layout Section

Introduction
\layout Standard

FreePOPs is a POP3 daemon plus a LUA interpreter and some extra libraries
 for HTTP and HTML parsing.
 Its main purpose is translating local POP3 requests to remote HTTP
 actions on the supported web-mails, but it is really more flexible.
 For example there is a plugin to read news from a website as if they were
 mails in a mailbox.
 You can easily extend FreePOPs on the fly, without even restarting it.
 You can add a plugin or modify an existing one simply changing the script
 file since the plugins are written in LUA and are interpreted on the fly.
\newline 
FreePOPs can be useful in some situations, here we give the most obvious
 ones:
\layout Itemize

You are behind a firewall that closes the 110 port but you need to read
 your mail and the web-mail of your mail provider sucks.
\layout Itemize

Your mail provider does not allow you to access your mailbox with POP3 protocol,
 but only through the web-mail service.
\layout Itemize

You prefer looking at your mailbox instead of browsing some websites news.
\layout Itemize

You have to develop a pop3 server in less than a week and you want it to
 be reasonably fast and not so memory consuming.
\layout Itemize

You are not a C hacker, but you want to benefit from a fast POP3 server
 frontend written in C and you want not to loose a month in writing the
 backend in C.
 LUA is a really simple and tiny language, one week is enough to learn it
 in a way that allows you to use it productively.
\layout Section

Features
\layout Standard

FreePOPs is the only software I know with these features:
\layout Itemize

POP3 server RFC compliant (not full featured but compliant).
\layout Itemize

Portable (written in C and LUA that is written in C, so everything is written
 in the most portable language around the world).
\layout Itemize

Small (in the sense of resources usage) and reasonably fast.
\layout Itemize

Extremely extensible on the fly using a simple and powerful language.
\layout Itemize

Pretty documented.
\layout Itemize

Released under the GNU/GPL license (this means FreePOPs is Free Software).
\layout Section

History
\layout Standard

FreePOPs is not born from scratch.
 A similar (only in the main usage situation) project is LiberoPOPs.
 
\layout Standard

The ancestor of FreePOPs is completely written in C for some non interesting
 reasons.
 LiberoPOPs supports 
\begin_inset Quotes eld
\end_inset 

plugins
\begin_inset Quotes erd
\end_inset 

 but in a more static and complex way.
 The POP3 server frontend could be attached to a backend written in C.
 This means you have to recompile and restart LiberoPOPs each time to change
 a line in a plugin.
 Another interesting point is that LiberPOPs was created from scratch in a
 really short amount of time (you have to be Italian and use a 
\family typewriter 
@libero.it
\family default 
 mail address to understand why), this means it was born with a lot of bugs
 and FIX-ME in the code.
 
\layout Standard

The LiberoPOPs project had a quick success, since everybody needed it.
 This means we had a lot of users.
 In the opensource (and also Linux) philosophy you have to release frequently
 and this was exactly what we did.
 We used to release every 2 days.
 But we were working not with Unix users, nor hackers, mostly Win32 users.
 I've not really understood why they considered a boring task to read a
 3 pages tutorial and a 1 page F.A.Q.
 but I've realized that they are lazy/bored of updating the software every
 2 days.
 The ugly Win-world has taught them that software auto-updates, auto-install
 and even auto-codes itself probably.
 
\layout Standard

We tried to solve this pulling out of the C engine most of the change-prone
 code, but this was really hard since C is not thought to do this.
 After LiberoPOPs had stabilized we started to think how to solve this.
 
\layout Standard

A scripting/interpreted embedded language seemed to me a nice choice and after
 a long search on the net and on the newsgroup of my university I found
 LUA.
 This is not the place for telling the world how good this small language is
 and I won't talk more about it here.
 Integrating the LUA interpreter in LiberoPOPs was not so hard and FreePOPs
 is the result.
 Now it is really easier to write/test a plugin and (even if it is not implement
ed yet) an auto-update facility is really easy to code since there is no
 need to recompile the C core in most cases.
\layout Section

FreePOPs configuration file
\layout Standard

FreePOPs doesn't really need a configuration.
 Most users shouldn't change the configuration file.
 In case you are a developer or a really curious user the configuration
 file is 
\family typewriter 
config.lua
\family default 
, placed in the program directory under win32 or in 
\family typewriter 
/etc/freepops/
\family default 
 in a posix environment.
\layout Section

FreePOPs command line parameters
\layout Standard

The real FreePOPs configuration is made trough command line arguments.
 They are described in depth in the man page in Unix environments, here we
 present only the most useful:
\layout Description

-p\SpecialChar ~
<port>,\SpecialChar ~
--port\SpecialChar ~
<port> By default FreePOPs binds on port 2000.
 To alter this behaviour just use this switch.
\layout Description

-P\SpecialChar ~
<host>:<port>,\SpecialChar ~
--proxy\SpecialChar ~
<host>:<port> To tell FreePOPs which is your HTTP
 proxy.
\layout Description

-v,\SpecialChar ~
--verbose,\SpecialChar ~
-w,\SpecialChar ~
--veryverbose This tells FreePOPs to log some interesting
 info for bug reporting.
\layout Description

-t\SpecialChar ~
<num>,\SpecialChar ~
--threads\SpecialChar ~
<num> FreePOPs is able to manage multiple connections,
 up to num.
 Default is 5.
\layout Standard

In posix environment like Debian GNU/Linux you can start FreePOPs at boot
 time as a standard service.
 In this case the command line switches are stored in 
\family typewriter 
/etc/default/freepops
\family default 
, in some rpm based systems you should find the same file as 
\family typewriter 
/etc/sysconfig/freepops
\family default 
.
\layout Section

Email client configuration
\layout Standard

To configure your email client you must change the pop3 server settings.
 Usually you must use localhost as the pop3 host name, and 2000 as the pop3
 port.
 In case you install FreePOPs in another computer of your LAN, you should
 use the host's name instead of localhost.
\layout Section

Creating a plugin
\layout Standard

The best way of doing this is to read carefully the 
\family typewriter 
libero.lua
\family default 
 file, that is a quite simple but really commented example of web-mail plugin.
 Then you should copy the 
\family typewriter 
skeleton.lua
\family default 
 file and start hacking on it.
 Remember to edit 
\family typewriter 
config.lua
\family default 
 to make FreePOPs associate the right mail-addresses domains to your new
 plugin.
 A simpler example is 
\family typewriter 
flatnuke.lua
\family default 
 that is a web-news plugin.
\layout Subsection

The interface between the C core and a plugin
\layout Standard

As we explained before the C POP3 frontend has to be attached to a LUA backend.
 The interface is really simple if you know the POP3 protocol.
 Here we only summarize the meaning, but the RFC 1939 (included in the 
\family typewriter 
doc/
\family default 
 directory of the source distribution) is really short and easy to read.
 As your intuition should suggest the POP3 client may ask the pop3 server
 to know something about the mail that is in the mailbox and eventually
 retrieve/delete a message.
 And this is exactly what it does.
\layout Standard

The backend must implement all the POP3 commands (like USER, PASS, RETR,
 DELE, QUIT, LIST, ...) and must give back to the frontend the result.
 Let us give a simple example of a POP3 section taken from the RFC:
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{small}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
     1  S: <wait for connection on TCP port 110>
\layout Standard
     2  C: <open connection>
\layout Standard
     3  S:    +OK POP3 server 
\layout Standard
     4  C:    USER linux@kernel.org
\layout Standard
     5  S:    +OK now insert the pasword
\layout Standard
     6  C:    PASS gpl
\layout Standard
     7  S:    +OK linux's maildrop has 2 messages (320 octets)
\layout Standard
     8  C:    STAT
\layout Standard
     9  S:    +OK 1 320
\layout Standard
    10  C:    LIST
\layout Standard
    11  S:    +OK 2 messages (320 octets)
\layout Standard
    12  S:    1 320
\layout Standard
    13  S:    .
\layout Standard
    14  C:    RETR 1
\layout Standard
    15  S:    +OK 120 octets
\layout Standard
    16  S:    <the POP3 server sends message 1>
\layout Standard
    17  S:    .
\layout Standard
    18  C:    DELE 1
\layout Standard
    19  S:    +OK message 1 deleted
\layout Standard
    20  C:    QUIT
\layout Standard
    21  S:    +OK dewey POP3 server signing off (maildrop empty)
\layout Standard
    22  C:  <close connection>
\layout Standard
    23  S:  <wait for next connection>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{small}
\end_inset 


\layout Standard

In this session the backend will be called for lines 4, 6, 8, 10, 14, 18,
 20 (all the 
\family typewriter 
C:
\family default 
 lines) and respectively the functions implementing the POP3 commands will
 be called this way
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{small}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
    user(p,"linux@kernel.org")
\layout Standard
    pass(p,"gpl")
\layout Standard
    stat(p)
\layout Standard
    list_all(p)
\layout Standard
    retr(p,1)
\layout Standard
    dele(p,1)
\layout Standard
    quit_update(p)
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{small}
\end_inset 


\layout Standard

Later I will make clear what p is.
 I hope we'll remove it making it implicit for complete transparency.
 It is easy to understand that there is a 1-1 mapping between POP3 commands
 and plugin function calls.
 You can view a plugin as the implementation of the POP3 interface.
\layout Subsection

The interface between a plugin and the C core
\layout Standard

Let us take in exam the call to 
\family typewriter 
pass(p,
\begin_inset Quotes erd
\end_inset 

linux@kernel.org
\begin_inset Quotes erd
\end_inset 

)
\family default 
.
 Here the plugin should authenticate the user (if there is a sort of authenticati
on) and inform the C core of the result.
 To achieve this each plugin function must return an error flag, to be more
 accurate one of these errors:
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{small}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
    POPSERVER_ERR_OK        
\layout Standard
    POPSERVER_ERR_SYNTAX    
\layout Standard
    POPSERVER_ERR_NETWORK   
\layout Standard
    POPSERVER_ERR_AUTH      
\layout Standard
    POPSERVER_ERR_INTERNAL  
\layout Standard
    POPSERVER_ERR_NOMSG     
\layout Standard
    POPSERVER_ERR_LOCKED    
\layout Standard
    POPSERVER_ERR_EOF       
\layout Standard
    POPSERVER_ERR_TOOFAST   
\layout Standard
    POPSERVER_ERR_UNKNOWN   
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{small}
\end_inset 


\layout Standard

In our case the most appropriate error codes are 
\family typewriter 
POPSERVER_ERR_AUTH
\family default 
 and 
\family typewriter 
POPSERVER_ERR_OK
\family default 
.
 This is a simple case, in which an error code is enough.
 Now we analyze the more complex case of the call to 
\family typewriter 
list_all(p)
\family default 
.
 Here we have to return an error code as before, but we have also to inform
 the C core of the size of all messages in the mailbox.FIX set_mailbox_nummest
 + set_mailmessage_size...
\layout Standard

FIX caso della retr e fine.
\layout Section

Submitting a bug
\layout Standard

When you have problems, you think you found a bug, please follow strictly
 this 
\emph on 
iter
\emph default 
:
\layout Enumerate

Update to the most recent version of FreePOPs.
\layout Enumerate

Try to reproduce the bug, if the bug is not easily reproducible we are out
 of luck.
 Something can still be tried: if the software crashed you could compile it from
 the sources, install valgrind, run freepopsd with valgrind and hope the
 error messages are interesting.
\layout Enumerate

Clean the log files
\layout Enumerate

Start FreePOPs with the -w switch
\layout Enumerate

Reproduce the bug
\layout Enumerate

Send to the developers the log, plus any other info like your system type
 and how to reproduce this bug.
\layout Section

Authors
\layout Standard

This manual has been written by Enico Tassi <gareuselesinge@users.sourceforge.net>
 and revised by Nicola Cocchiaro <ncocchiaro@users.sourceforge.net>
\newline 
FreePOPs is developed by:
\layout Itemize

Enico Tassi <gareuselesinge@users.sourceforge.net>
\layout Section

Thanks
\layout Standard

Special thanks goes to the users who tested the software, to the hackers
 who made it possible to have a free and reliable devolpment environment
 as the Debian GNU/Linux system.
\the_end
