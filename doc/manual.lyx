#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble

\end_preamble
\language english
\inputencoding auto
\fontscheme bookman
\graphics default
\paperfontsize 12
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle fancy

\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
thispagestyle{empty}
\layout Standard

\backslash 
vspace*{5cm}
\layout Standard

\backslash 
begin{flushright}
\backslash 
huge{FreePOPs Manual}
\layout Standard

\backslash 
vspace{-6mm}
\layout Standard

\backslash 
rule{15cm}{2mm}
\layout Standard

\backslash 
vspace{5mm}
\layout Standard

\backslash 
normalsize{Written by Enrico Tassi, Nicola Cocchiaro}
\layout Standard
Version $Id$
\layout Standard

\backslash 
end{flushright}
\layout Standard

\backslash 
vspace{
\backslash 
stretch{1}}
\layout Standard

\backslash 
hspace{
\backslash 
stretch{1}}Document released under the GNU/FDL license.
\backslash 
hspace{
\backslash 
stretch{1}}
\layout Standard

\backslash 
pagebreak
\end_inset 


\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
newpage
\end_inset 


\layout Section

Introduction
\layout Standard

FreePOPs is a POP3 daemon plus a LUA interpreter and some extra libraries
 for HTTP and HTML parsing.
 Its main purpose is translating local POP3 requests to remote HTTP actions
 on the supported web-mails, but it is really more flexible: for example
 there is a plugin to read news from a website as if they were mails in
 a mailbox.
 You can easily extend FreePOPs on the fly, without even restarting it;
 you can add a plugin or modify an existing one simply changing the script
 file since the plugins are written in LUA and are interpreted on the fly.
\layout Subsection

Usage situations
\layout Standard

FreePOPs can be useful in some situations, here we give the most obvious
 ones:
\layout Itemize

You are behind a firewall that closes port 110 but you need to read your
 mail and the web-mail of your mail provider sucks.
\layout Itemize

Your mail provider does not allow you to access your mailbox with the POP3
 protocol, but only through the web-mail service.
\layout Itemize

You prefer looking at your mailbox instead of browsing some websites news.
\layout Itemize

You have to develop a POP3 server in less than a week and you want it to
 be reasonably fast and not so memory consuming.
\layout Itemize

You are not a C hacker, but you want to benefit from a fast POP3 server
 frontend written in C and you want not to waste a month in writing the
 backend in C.
 LUA is a really simple and tiny language, one week is enough to learn it
 in a way that allows you to use it productively.
\layout Subsection

Features
\layout Standard

FreePOPs is the only software I know with these features:
\layout Itemize

POP3 server RFC compliant (not full featured but compliant).
\layout Itemize

Portable (written in C and LUA that is written in C, so everything is written
 in the most portable language around the world).
\layout Itemize

Small (in the sense of resources usage) and reasonably fast.
\layout Itemize

Extremely extensible on the fly using a simple and powerful language.
\layout Itemize

Pretty documented.
\layout Itemize

Released under the GNU/GPL license (this means FreePOPs is Free Software).
\layout Subsection

Plugins
\layout Standard

These are the plugins currently included in FreePOPs:
\layout Description

libero.lua This plugin fully supports the 
\family typewriter 
www.libero.it
\family default 
 webmail for mailboxes with domains like 
\family typewriter 
@libero.it
\family default 
, 
\family typewriter 
@iol.it
\family default 
, 
\family typewriter 
@inwind.it
\family default 
, 
\family typewriter 
@blu.it
\family default 
.
\layout Description

tin.lua This plugin fully supports the 
\family typewriter 
communicator.virgilio.it
\family default 
 webmail for mailboxes with domains like 
\family typewriter 
@tin.it
\family default 
, 
\family typewriter 
@virgilio.it
\family default 
.
\layout Description

lycos.lua This plugin supports the 
\family typewriter 
mail.lycos.it
\family default 
 webmail for mailboxes with 
\family typewriter 
@lycos.it
\family default 
 domains.
\layout Description

popforward.lua This is a plugin mainly used for testing some FreePOPs modules.
 It acts as a POP3 forward, it simply works as a man in the middle of you
 and a real POP3 server.
 This allowed us to test FreePOPs without having any real plugin already
 written.
 You may consider using it to masquerade a really buggy POP3 server that
 can be easily compromised trough malicious requests.
 Obviously we suggest you to examine properly this plugin, and hack on it
 to prevent malicious requests to your server.
\layout Description

aggregator.lua Many sites provide an RSS backend for indexing their news.
 This plugin makes this RSS behave as a mailbox in which you can find a
 mail for each news.
\layout Description

flatnuke.lua This is a more powerful aggregator for FlatNuke-based
\begin_inset Foot
collapsed true

\layout Standard

See HTTP://flatnuke.sourceforge.net for the project homepage
\end_inset 

 websites, and allows the download of the whole news body.
\layout Description

kernel.lua This is a plugin to monitor the news about the Linux kernel through
 ChangeLogs.
\layout Description

gmail.lua This plugin supports the 
\family typewriter 
gmail.google.com
\family default 
 webmail for mailboxes with 
\family typewriter 
@gmail.com
\family default 
 domains.
\layout Section

History
\layout Standard

FreePOPs was not born from scratch.
 A similar project (only in the main usage situation) is LiberoPOPs.
 
\layout Standard

The ancestor of FreePOPs is completely written in C for some uninteresting
 reasons.
 LiberoPOPs supports 
\begin_inset Quotes eld
\end_inset 

plugins
\begin_inset Quotes erd
\end_inset 

 but in a more static and complex way.
 The POP3 server frontend could be attached to a backend written in C, this
 means you have to recompile and restart LiberoPOPs each time to change
 a line in a plugin.
 Another interesting point is that LiberPOPs was created from scratch in
 a really short time (you have to be Italian and use a 
\family typewriter 
@libero.it
\family default 
 mail address to understand why), this means it was born with a lot of bugs
 and FIX-ME in the code.
 
\layout Standard

The LiberoPOPs project had a quick success, because everybody needed it,
 and this means we had a lot of users.
 In the opensource (and also Linux) philosophy you have to release frequently
 and this was exactly what we did: we used to release every two days.
 We were working not with Unix users, nor hackers, but mostly with Win32
 users.
 Suddenly we realized that they were lazy/bored of updating the software
 every 2 days.
 The ugly Win-world has taught them that software auto-updates, auto-install
 and even auto-codes probably.
 
\layout Standard

We tried to solve this pulling out of the C engine most of the change-prone
 code, but this was really hard since C is not thought to do this.
 After LiberoPOPs had stabilized we started to think how to solve this.
 
\layout Standard

A scripting/interpreted embedded language seemed to me a nice choice and
 after a long search on the net and on the newsgroup of my university I
 found LUA..
 This is not the place for telling the world how good this small language
 is and I won't talk more about it here.
 Integrating the LUA interpreter in LiberoPOPs was not so hard and FreePOPs
 is the result.
 Now it is really easier to write/test a plugin and (even if it is not implement
ed yet) an auto-update facility is really easy to code since there is no
 need to recompile the C core in most cases.
\layout Section

FreePOPs configuration file
\layout Standard

FreePOPs doesn't really need a configuration.
 Most users shouldn't change the configuration file.
 In case you are a developer or a really curious user the configuration
 file is 
\family typewriter 
config.lua
\family default 
, placed in the program directory under win32 or in 
\family typewriter 
/etc/freepops/
\family default 
 in a posix environment.
\layout Standard

Later you will learn that plugins are associated with a mail address domain,
 and some of these plugins are aliased to other domains to make it easier
 to fetch some news from some sites.
 Read the plugin documentation for more info about them, and maybe send
 as a mail with your new alias if you want it to be integrated in the next
 FreePOPs release.
\layout Standard

Since version 0.0.11 the 
\family typewriter 
config.lua
\family default 
 file has a policy section.
 In this section you can ban or allow classes of mail addresses.
 This may be useful to network administrators.
\layout Section

FreePOPs command line parameters
\layout Standard

The real FreePOPs configuration is made trough command line arguments.
 They are described in depth in the man page in Unix environments:
\layout Description

-p\SpecialChar ~
<port>,\SpecialChar ~
--port\SpecialChar ~
<port> By default FreePOPs binds on port 2000.
 To alter this behaviour just use this switch.
\layout Description

-t\SpecialChar ~
<num>,\SpecialChar ~
--threads\SpecialChar ~
<num> FreePOPs is able to manage multiple connections,
 up to 
\emph on 
num
\emph default 
.
 Default is 5.
\layout Description

-b\SpecialChar ~
addr,\SpecialChar ~
--bind\SpecialChar ~
addr Binds over 
\emph on 
addr
\emph default 
 instead INADDR_ANY (0.0.0.0).
 
\emph on 
addr
\emph default 
 must be a character string containing an IPv4 network address in the dotted-qua
d format, 
\begin_inset Quotes eld
\end_inset 

ddd.ddd.ddd.ddd
\begin_inset Quotes erd
\end_inset 

 or a host name.
\layout Description

-l\SpecialChar ~
logfacility,\SpecialChar ~
--logmode\SpecialChar ~
logfacility Can be used to specify the logging facility.
 
\emph on 
logfacility
\emph default 
 can be 
\begin_inset Quotes eld
\end_inset 

stdout
\begin_inset Quotes erd
\end_inset 

 for stdout (the default), 
\begin_inset Quotes eld
\end_inset 

syslog
\begin_inset Quotes erd
\end_inset 

 to use the logging daemon or a valid filename to log to this file.
\layout Description

-d,\SpecialChar ~
--daemonize Moves the process to background releasing the tty.
\layout Description

-P\SpecialChar ~
<host>:<port>,\SpecialChar ~
--proxy\SpecialChar ~
<host>:<port> To tell FreePOPs which is your HTTP
 proxy.
 If 
\emph on 
port
\emph default 
 is not set then the default 8080 is used.
\layout Description

-A\SpecialChar ~
<username>:<password>,\SpecialChar ~
--auth\SpecialChar ~
<username>:<password> For proxies with basic
 authentication, to specify username and password.
 Must be used with 
\emph on 
-P
\emph default 
 or its long form.
\layout Description

-u\SpecialChar ~
name,\SpecialChar ~
--useragent\SpecialChar ~
name Use this useragent in http connections.
 The default is 
\begin_inset Quotes eld
\end_inset 

Firefox/0.8
\begin_inset Quotes erd
\end_inset 

.
 A valid example is mozilla's 
\begin_inset Quotes eld
\end_inset 

Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.5) Gecko/20031024 Debian/1.5-2
\begin_inset Quotes erd
\end_inset 

.
\layout Description

-s\SpecialChar ~
user.group,\SpecialChar ~
--suid\SpecialChar ~
user.group This option is used to make freepopsd drop root
 privileges after binding.
 If you run it as a normal user there is no need to use this option.
\layout Description

-h,\SpecialChar ~
--help Prints the usage message.
\layout Description

-v,\SpecialChar ~
--verbose,\SpecialChar ~
-w,\SpecialChar ~
--veryverbose This tells FreePOPs to log some interesting
 info for bug reporting.
\layout Standard

In posix environments like Debian GNU/Linux you can start FreePOPs at boot
 time as a standard service.
 In this case the command line switches are stored in 
\family typewriter 
/etc/default/freepops
\family default 
, in some rpm based systems you should find the same file as 
\family typewriter 
/etc/sysconfig/freepops
\family default 
.
\layout Section

Email client configuration
\layout Standard

To configure your email client you must change the pop3 server settings.
 Usually you must use localhost as the pop3 host name, and 2000 as the pop3
 port.
 In case you install FreePOPs in another computer of your LAN, you should
 use the host's name instead of localhost, while in case you changed the
 default port with the 
\family typewriter 
-p
\family default 
 switch you will have to use that same port in your email client.
 You always have to use a full email address as username, for example 
\family typewriter 
something@libero.it
\family default 
 instead of only 
\family typewriter 
something
\family default 
.
 This is because FreePOPs chooses the plugin to load by looking at your
 username.
 Later we will present all the plugins and their associated domains.
\layout Section

Plugins
\layout Standard

Here we give a detailed description of each plugin.
\layout Subsection

libero.lua
\layout Standard

This plugin allows you to read the mails you have in a 
\family typewriter 
@libero.it
\family default 
, 
\family typewriter 
@iol.it
\family default 
, 
\family typewriter 
@inwind.it
\family default 
 and 
\family typewriter 
@blu.it 
\family default 
mailbox.
 This means you can still use your favorite mail reader instead of using
 the webmail.
 This plugin acts as a browser that surfs your webmail account and make
 it appear as a POP3 server.
 For more info on this plugin you may read the LiberoPOPs (FreePOPs ancestor)
 website at 
\family typewriter 
http://liberopops.sourceforge.net
\layout Standard

To use this plugin you have to use your full email address as the username
 and your real password as the password.
\layout Subsection

tin.lua
\layout Standard

This is the webmail support for 
\family typewriter 
@virgilio.it
\family default 
 and 
\family typewriter 
@tin.it 
\family default 
mailboxes.
 To use this plugin you have to use your full email address as the username
 and your real password as the password.
\layout Subsection

lycos.lua
\layout Standard

This is the webmail support for 
\family typewriter 
@lycos.it
\family default 
 mailboxes.
 To use this plugin you have to use your full email address as the username
 and your real password as the password.
\layout Subsection

popforward.lua
\layout Standard

This plugin was developed to test FreePOPs before any real plugins were
 written.
 It simply forwards to a real POP3 server your local requests.
 This can be used for masquerading a buggy POP3 server, but if you think
 you need this you should examine carefully the plugin code and add checks
 to improve the detection/avoidance of malicious requests, since the plugins
 was not born with security in mind.
 
\layout Standard

To use this plugin you have to edit the config.lua file.
 This because we can't add all the existing POP3 server to this file :)
 The plugin wants two arguments, the POP3 host and the port (usually 
\family typewriter 
110
\family default 
) on which the server listens.
 This is an example of a configuration line for this plugin, in which all
 email addresses of the 
\family typewriter 
@virgilio.it
\family default 
 domain are forwarded to 
\family typewriter 
in.virgilio.it:110
\family default 
:
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- popforward plugin 
\layout Standard
freepops.MODULES_MAP["virgilio.it"]     = {         
\layout Standard
       name="popforward.lua",         
\layout Standard
       args={ 
\layout Standard
              port=110,
\layout Standard
              host="in.virgilio.it"
\layout Standard
       } 
\layout Standard
} 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Subsection

aggregator.lua
\layout Standard

Usually you can benefit from the W3C's RSS format when you read some website
 news.
 The RSS file indexes the news, providing a link to them.
 This plugin can make your mail client see the RSS file as a mailbox from
 which you can download each news as if it was a mail message.
 The only limitation is that this plugin can fetch only a news summary plus
 the news link.
 
\layout Standard

To use this plugin you have to use a casual username with the 
\family typewriter 
@aggregator
\family default 
 suffix (ex: 
\family typewriter 
foo@aggregator
\family default 
) and as the password the URL of the RSS file(ex: 
\family typewriter 
http://www.securityfocus.com/rss/vulnerabilities.xml
\family default 
).
 For your commodity we added some alias for you.
 This means you have not to search by hand the URL of the RSS file.
 We added some domain, for example 
\family typewriter 
@securityfocus.com
\family default 
, that can be used to directly use the aggregator plugin with these website.
 To use these alias you have to use a username in the form 
\family typewriter 
something@aggregatordomain
\family default 
 and a casual password.
 This is the list of aliases for the aggregator plugin.
\newline 

\newline 

\begin_inset  Tabular
<lyxtabular version="3" rows="13" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
aggregatordomain
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
freepops.rss.en
\end_inset 
</cell>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://freepops.sourceforge.net/
\family default 
 news (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
freepops.rss.it
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://freepops.sourceforge.net/
\family default 
 news (Italian)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
flatnuke.sf.net
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://flatnuke.sourceforge.net/
\family default 
 news (Italian)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
ziobudda.net
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://ziobudda.net/
\family default 
 news (both Italian and English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
punto-informatico.it
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://punto-informatico.it/
\family default 
 news (Italian)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
linuxdevices.com
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://linuxdevices.com/
\family default 
 news (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
gaim.sf.net
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://gaim.sourceforge.net/ 
\family default 
news (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
securityfocus.com
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://www.securityfocus.com/ 
\family default 
new vulnerabilities (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
games.gamespot.com
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://www.gamespot.com/ 
\family default 
computer games news (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
news.gamespot.com
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://www.gamespot.com/ 
\family default 
GameSpot news (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
kerneltrap.org
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://kerneltrap.org 
\family default 
news (Inglese)
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
linux.kerneltrap.org
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://linux.kerneltrap.org 
\family default 
news (Inglese)
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

flatnuke.lua
\layout Standard

This plugin is an aggregator plugin specialized in the websites made with
 the FlatNuke
\begin_inset Foot
collapsed true

\layout Standard

HTTP://flatnuke.sourceforge.net
\end_inset 

 content management system, or other sites that use the same news format
 like the FreePOPs website.
 Since in a FlatNuke site the news are stored in plain xml files this plugin
 is able to fetch the whole news, and not only the headings as the aggregator
 plugin does.
 This is really useful if you don't want to surf the website to read the
 news.
\layout Standard

To use this plugin you have to use a username with the 
\family typewriter 
@flatnuke
\family default 
 domain (ex: 
\family typewriter 
something@flatnuke
\family default 
) and a flatnuke homepage URL as the password (ex: 
\family typewriter 
http://flatnuke.sourceforge.net/
\family default 
, no need for the RSS file URL since FlatNuke puts the RSS in a fixed and
 well known position.
 There are some alias for FlatNuke sites, see the aggregator plugin documentatio
n to know what this means):
\newline 

\newline 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
aggregatordomain
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
freepops.en
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://freepops.sourceforge.net/
\family default 
 full news (English)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
freepops.it
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://freepops.sourceforge.net/
\family default 
 full news (Italian)
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
flatnuke.it
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
http://flatnuke.sourceforge.net/
\family default 
 full news (Italian)
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

kernel.lua
\layout Standard

This plugin helps in staying up to date with the Linux kernel releases.
 
\family typewriter 
http://kernel.org
\family default 
 is the official page with the Linux kernel releases, each with its ChangeLog.
 You should use 
\family typewriter 
something@kernel.org
\family default 
 to receive news about every tree, 
\family typewriter 
something@kernel.org.24
\family default 
 or 
\family typewriter 
something@kernel.org.26
\family default 
 for a specific tree.
 Password is not used, type a random string.
\layout Subsection

gmail.lua
\layout Standard

This is the webmail support for 
\family typewriter 
@gmail.com
\family default 
 mailboxes.
 To use this plugin you have to use your full email address as the username
 and your real password as the password.
\layout Section

Creating a plugin
\layout Standard

Two sections follow, the first is a quick overview of what a plugin has
 to do, the latter is a more detailed tutorial.
 Before proceeding I suggest you read some stuff that is at the base of
 plugin writing:
\layout Enumerate

Since plugins are written in LUA you must read at least the LUA tutorial
 (HTTP://lua-users.org/wiki/LuaTutorial); many thanks to the guys who wrote
 it.
 LUA is a quite simple scripting language, easy to learn, and easy to read.
 If you are interested in this language you should read THE book about LUA
 (
\begin_inset Quotes eld
\end_inset 

Programming in Lua
\begin_inset Quotes erd
\end_inset 

 by Roberto Ierusalimschy HTTP://www.inf.puc-rio.br/~roberto/book/).
 It is a really good book, believe me.
\layout Enumerate

Since we have to implement a POP3 backend you should know what POP3 is.
 The rfc is number 1939 and is included in the doc/ directory of the source
 package of FreePOPs, but you can fetch it from the net HTTP://www.ietf.org/rfc/rf
c1939.txt.
\layout Enumerate

Read carefully this tutorial, it is hardly a good tutorial, but is better
 than nothing.
\layout Enumerate

The website contains, in the doc section, a quite good documentation of
 the sources.
 You should keep a web browser open at the LUA modules documentation page
 while writing a plugin.
\layout Enumerate

After creating a prototype, you should read a full featured plugin.
 The libero.lua plugin is really well commented, you may start there.
\layout Enumerate

Remember that this software has an official forum (HTTP://freepops.diludovico.it)
 and some authors you may ask for help.
\layout Subsection

Plugins overview
\layout Standard

A plugin is essentially a backend for a POP3 server.
 The plugins are written in LUA
\begin_inset Foot
collapsed true

\layout Standard

The language website is HTTP://www.lua.org
\end_inset 

 while the POP3 server is written in C.
 Here we examine the interfaces between The C core and the LUA plugins.
\layout Subsubsection

The interface between the C core and a plugin
\layout Standard

As we explained before the C POP3 frontend has to be attached to a LUA backend.
 The interface is really simple if you know the POP3 protocol.
 Here we only summarize the meaning, but the RFC 1939 (included in the 
\family typewriter 
doc/
\family default 
 directory of the source distribution) is really short and easy to read.
 As your intuition should suggest the POP3 client may ask the pop3 server
 to know something about the mail that is in the mailbox and eventually
 retrieve/delete a message.
 And this is exactly what it does.
\layout Standard

The backend must implement all the POP3 commands (like USER, PASS, RETR,
 DELE, QUIT, LIST, ...) and must give back to the frontend the result.
 Let us give a simple example of a POP3 session taken from the RFC:
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
     1  S: <wait for connection on TCP port 110>
\layout Standard
     2  C: <open connection>
\layout Standard
     3  S:    +OK POP3 server 
\layout Standard
     4  C:    USER linux@kernel.org
\layout Standard
     5  S:    +OK now insert the pasword
\layout Standard
     6  C:    PASS gpl
\layout Standard
     7  S:    +OK linux's maildrop has 2 messages (320 octets)
\layout Standard
     8  C:    STAT
\layout Standard
     9  S:    +OK 1 320
\layout Standard
    10  C:    LIST
\layout Standard
    11  S:    +OK 2 messages (320 octets)
\layout Standard
    12  S:    1 320
\layout Standard
    13  S:    .
\layout Standard
    14  C:    RETR 1
\layout Standard
    15  S:    +OK 120 octets
\layout Standard
    16  S:    <the POP3 server sends message 1>
\layout Standard
    17  S:    .
\layout Standard
    18  C:    DELE 1
\layout Standard
    19  S:    +OK message 1 deleted
\layout Standard
    20  C:    QUIT
\layout Standard
    21  S:    +OK dewey POP3 server signing off (maildrop empty)
\layout Standard
    22  C:  <close connection>
\layout Standard
    23  S:  <wait for next connection>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Standard

In this session the backend will be called for lines 4, 6, 8, 10, 14, 18,
 20 (all the 
\family typewriter 
C:
\family default 
 lines) and respectively the functions implementing the POP3 commands will
 be called this way
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
    user(p,"linux@kernel.org")
\layout Standard
    pass(p,"gpl")
\layout Standard
    stat(p)
\layout Standard
    list_all(p)
\layout Standard
    retr(p,1)
\layout Standard
    dele(p,1)
\layout Standard
    quit_update(p)
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Standard

Later I will make clear what p is.
 I hope we'll remove it making it implicit for complete transparency.
 It is easy to understand that there is a 1-1 mapping between POP3 commands
 and plugin function calls.
 You can view a plugin as the implementation of the POP3 interface.
\layout Subsubsection

The interface between a plugin and the C core
\layout Standard

Let us take in exam the call to 
\family typewriter 
pass(p,
\begin_inset Quotes erd
\end_inset 

linux@kernel.org
\begin_inset Quotes erd
\end_inset 

)
\family default 
.
 Here the plugin should authenticate the user (if there is a sort of authenticat
ion) and inform the C core of the result.
 To achieve this each plugin function must return an error flag, to be more
 accurate one of these errors:
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="7cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
Code
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none" width="7cm">
\begin_inset Text

\layout Standard


\size footnotesize 
Meaning
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_OK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
No error
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_NETWORK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
An error concerning the network
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_AUTH
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
Authorization failed
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_INTERNAL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
Internal error, please report the bug
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_NOMSG
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
The message number is out of range
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_LOCKED
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
Mailbox is locked by another session
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_EOF
\end_inset 
</cell>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
End of transmission, used in the popserver_callback
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_TOOFAST
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
You are not allowed to reconnect to the server now, wait a bit and retry
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
POPSERVER_ERR_UNKNOWN
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\size footnotesize 
No idea of what error I've encountered
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\newline 

\newline 

\layout Standard

In our case the most appropriate error codes are 
\family typewriter 
POPSERVER_ERR_AUTH
\family default 
 and 
\family typewriter 
POPSERVER_ERR_OK
\family default 
.
 This is a simple case, in which an error code is enough.
 Now we analyze the more complex case of the call to 
\family typewriter 
list_all(p)
\family default 
.
 Here we have to return an error code as before, but we also have to inform
 the C core of the size of all messages in the mailbox.
 We need the p parameter passed to each plugin function (note that that
 parameter may became implicit in the future).
 
\family typewriter 
p
\family default 
 stands for the data structure that the C core expects us to fill calling
 appropriate functions like 
\family typewriter 
set_mailmessage_size(p,num,size)
\family default 
 where num is the message number and size is the size in bytes.
 Usually it is really common to put more functions all together.
 For example when you get the message list page in a webmail you know the
 number of the messages, their size and uidl so you can fill the p data
 structure with all the informations for LIST, STAT, UIDL.
 
\layout Standard

The last case that we examine is 
\family typewriter 
retr(p,num,data)
\family default 
.
 Since a mail message can be really big, there is no pretty way of downloading
 the entire message without making the mail client complain about the server
 death.
 The solution is to use a callback.
 Whenever the plugin has some data to send to the client he should call
 the 
\family typewriter 
popserver_callback(buffer,data)
\family default 
.
 
\family typewriter 
data
\family default 
 is an opaque structure the popserver needs to accomplish its work (note
 that this parameter may be removed for simplicity).
 In some cases, for example if you know the message is small or you are
 working on a fast network, you can fetch the whole message and send it,
 but remember that this is more memory consuming.
\layout Subsection

The art of writing a plugin (plugins tutorial)
\layout Standard

In this section we will write a plugin step by step, examining each important
 detail.
 We will not write a real and complete plugin since it may be a bit hard
 to follow but we will create an ad-hoc webmail for our purposes.
\layout Subsubsection

(step 1) The skeleton
\layout Standard

The first thing we will do is copy the 
\family typewriter 
skeleton.lua
\family default 
 file to 
\family typewriter 
foo.lua
\family default 
 (since we will write the plugin for the 
\emph on 
foo.xx
\emph default 
 webmail, 
\emph on 
xx
\emph default 
 stands for a real domain, but I don't want to mention any websites here...).
 Now with your best editor (I suggest vim under Unix and scintilla for win32,
 since they support syntax highlights for LUA, but any other text editor
 is OK) open 
\family typewriter 
foo.lua
\family default 
 and change the first few lines adding the plugin name, version, your name,
 your email and a short comment in the proper places.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- ************************************************************************** -- 
\layout Standard
--  FreePOPs @--put here domain-- webmail interface 
\layout Standard
--  
\layout Standard
--  $Id$ 
\layout Standard
--  
\layout Standard
--  Released under the GNU/GPL license 
\layout Standard
--  Written by --put Name here-- <--put email here--> 
\layout Standard
-- ************************************************************************** --
\layout Standard

\layout Standard
PLUGIN_VERSION = "--put version here--" 
\layout Standard
PLUGIN_NAME = "--put name here--" 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 Now we have an empty plugin, but it is not enough to start hacking on it.
 We need to open the 
\family typewriter 
config.lua
\family default 
 file (in the win32 distribution it is placed in the main directory, while
 in the Unix distribution it is in 
\family typewriter 
/etc/freepops/
\family default 
; other copies of this file may be included in the distributions, but they
 are backup copies) and add a line like this
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- foo plugin 
\layout Standard
freepops.MODULES_MAP["foo.xx"]      = {name="foo.lua"} 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 at the beginning of the file.
 Before ending the first step you should try if the plugin is correctly
 activated by FreePOPs when needed.
 To do this we have to add few lines to 
\family typewriter 
foo.lua
\family default 
, in particular we have to add an error return value to 
\family typewriter 
user()
\family default 
.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Must save the mailbox name 
\layout Standard
function user(pstate,username)   
\layout Standard
        return POPSERVER_ERR_AUTH 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 Now the user function always fails, returning an authentication error.
 Now you have to start FreePOPs (if it is already running you don't have
 to restart it) and start telnet (under win32 you should open a DOS prompt,
 under Unix you have the shell) and type 
\family typewriter 
telnet localhost 2000
\family default 
 and then type 
\family typewriter 
user test@foo.xx
\family default 
.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
tassi@garfield:~$ telnet localhost 2000 
\layout Standard
Trying 127.0.0.1... 
\layout Standard
Connected to garfield. 
\layout Standard
Escape character is '^]'. 
\layout Standard
+OK FreePOPs/0.0.10 pop3 server ready 
\layout Standard
user test@foo.xx 
\layout Standard
-ERR AUTH FAILED 
\layout Standard
Connection closed by foreign host. 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 The server responds closing the connection and printing an authorization
 failed message (thats OK, since the 
\family typewriter 
user()
\family default 
 function of our plugin returns this error).
 In the standard error file (the console under Unix, the file 
\family typewriter 
stderr.txt
\family default 
 under Windows) the error messages get printed, don't mind them now.
\layout Subsubsection

(step 2) The login
\layout Standard

The login procedure is the first thing we have to do.
 The POP3 protocol has 2 commands for login, 
\emph on 
user
\emph default 
 and 
\emph on 
pass
\emph default 
.
 First the client does a user, then it tells the server the password.
 As we have already seen in the overview this means that first 
\family typewriter 
user()
\family default 
 and then
\family typewriter 
\emph on 
 
\emph default 
pass()
\family default 
 will be called.
 This is a sample login:
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
tassi@garfield:~$ telnet localhost 2000 
\layout Standard
Trying 127.0.0.1... 
\layout Standard
Connected to garfield. 
\layout Standard
Escape character is '^]'. 
\layout Standard
+OK FreePOPs/0.0.10 pop3 server ready 
\layout Standard
user test@foo.xx 
\layout Standard
+OK PLEASE ENTER PASSWORD 
\layout Standard
pass hello 
\layout Standard
-ERR AUTH FAILED 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 If you start FreePOPs with the 
\family typewriter 
-w
\family default 
 switch you should read this on standard error/standard output:
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
freepops started with loglevel 2 on a little endian machine. 
\layout Standard
Cannot create pid file "/var/run/freepopsd.pid" 
\layout Standard
DBG(popserver.c, 162): [5118] ?? Ip address 0.0.0.0 real port 2000
\layout Standard
DBG(popserver.c, 162): [5118] ?? Ip address 127.0.0.1 real port 2000
\layout Standard
DBG(popserver.c, 162): [5118] -> +OK FreePOPs/0.0.10 pop3 server ready
\layout Standard
DBG(popserver.c, 162): [5118] <- user test@foo.xx
\layout Standard
DBG(log_lua.c,  83): (@src/lua/foo.lua, 37) : FreePOPs plugin 'Foo web mail' version '0.0.1' started!
\layout Standard
*** the user wants to login as 'test@foo.xx' 
\layout Standard
DBG(popserver.c, 162): [5118] -> +OK PLEASE ENTER PASSWORD
\layout Standard
DBG(popserver.c, 157): [5118] <- PASS ********* 
\layout Standard
*** the user inserted 'hello' as the password for 'test@foo.xx' 
\layout Standard
DBG(popserver.c, 162): [5118] -> -ERR AUTH FAILED
\layout Standard
AUTH FAILED 
\layout Standard
DBG(threads.c,  81): thread 0 will die 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

and the plugin has been changed a bit to store the user login and print
 some debug info.
 This is the plugin that gave this output:
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
foo_globals= {  
\layout Standard
       username="nothing",
\layout Standard
       password="nothing" 
\layout Standard
} 
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Must save the mailbox name 
\layout Standard
function user(pstate,username)   
\layout Standard
        foo_globals.username = username
\layout Standard
        print("*** the user wants to login as '"..username.."'")
\layout Standard
        return POPSERVER_ERR_OK
\layout Standard
end 
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Must login 
\layout Standard
function pass(pstate,password)
\layout Standard
        foo_globals.password = password
\layout Standard
        print("*** the user inserted '"..password..
\layout Standard
            "' as the password for '"..foo_globals.username.."'")
\layout Standard
        return POPSERVER_ERR_AUTH end 
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Must quit without updating 
\layout Standard
function quit(pstate)      
\layout Standard
        return POPSERVER_ERR_OK 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Here we have some important news.
 First the 
\family typewriter 
foo_globals
\family default 
 table that will contain all the globals (values that should be available
 to successive function calls) we need.
 So far we have the username and password there.
 The 
\family typewriter 
user()
\family default 
 function now stores the passed username in the 
\family typewriter 
foo_globals
\family default 
 table and prints something on standard output.
 The 
\family typewriter 
pass()
\family default 
 function likewise stores the password in the global table and prints some
 stuff.
 The 
\family typewriter 
quit()
\family default 
 function simply returns 
\family typewriter 
POPSERVER_ERR_OK
\family default 
 to make FreePOPs happy.
\layout Standard

Now that we know how FreePOPs will act during the login we have to implement
 the login in the webmail, but first uncomment the few lines in the 
\family typewriter 
init()
\family default 
 function (that is called when the plugin is started), that loads the 
\family typewriter 
browser.lua
\family default 
 module (the module we will use to login in the webmail).
 Here is the webmail login page viewed with Mozilla and the source of the
 page (you can see it with Mozilla with Ctrl-U).
\layout Standard


\begin_inset Graphics
	filename login.eps
	lyxscale 50
	scale 80
	keepAspectRatio

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
<html> 
\layout Standard
<head> 
\layout Standard
<title>foo.xx webmail login</title> 
\layout Standard
</head> 
\layout Standard
<body style="background-color : grey; color : white"> 
\layout Standard
<h1>Webmail login</h1>
\layout Standard
<form name="webmail" method="post" action="http://localhost:3000/"> 
\layout Standard
login: <input type="text" size="10" name="username"> <br> 
\layout Standard
password: <input type="password" size="10" name="password"> <br> 
\layout Standard
<input type="submit" value="login"> 
\layout Standard
</form> 
\layout Standard
</body> 
\layout Standard
</html>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Here we have 2 input fields, one called username and one called password.
 When the user clicks login the web browser will 
\family typewriter 
POST
\family default 
 to 
\family typewriter 
HTTP://localhost:3000/
\family default 
 the form contents (I used a local address for comfort, but it should be
 something like 
\family typewriter 
HTTP://webmail.foo.xx/login.php
\family default 
).
 This is what the browser sends:
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
POST / HTTP/1.1 
\layout Standard
Host: localhost:3000 
\layout Standard
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040614 Firefox/0.8 Accept: */*
\layout Standard
Accept-Language: en-us,en;q=0.5 
\layout Standard
Accept-Encoding: gzip,deflate 
\layout Standard
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 
\layout Standard
Keep-Alive: 300 
\layout Standard
Connection: keep-alive 
\layout Standard
Content-Type: application/x-www-form-urlencoded 
\layout Standard
Content-Length: 37
\layout Standard

\layout Standard
username=test%40foo.xx&password=hello 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 We are not interested in the first part (the HTTP header, since the browser
 module will take care of it) but in the last part, the posted data.
 Since the fields of the form were username and password, the posted data
 is
\family typewriter 

\newline 
username=test%40foo.xx&password=hello
\family default 
.
 Now we want to reproduce the same HTTP request with our plugin.
 This is the simple code that will do just that.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Must login 
\layout Standard
function pass(pstate,password)
\layout Standard
       foo_globals.password = password
\layout Standard
        
\layout Standard
       print("*** the user inserted '"..password..
\layout Standard
            "' as the password for '"..foo_globals.username.."'") 
\layout Standard

\layout Standard
       -- create a new browser
\layout Standard
       local b = browser.new()
\layout Standard

\layout Standard
       -- store the browser object in globals  
\layout Standard
       foo_globals.browser = b
\layout Standard

\layout Standard
       -- create the data to post      
\layout Standard
       local post_data = string.format("username=%s&password=%s",
\layout Standard
               foo_globals.username,foo_globals.password)
\layout Standard
       -- the uri to post to   
\layout Standard
       local post_uri = "http://localhost:3000/"
\layout Standard

\layout Standard
       -- post it      
\layout Standard
       local file,err = nil, nil       
\layout Standard
  
\layout Standard
       file,err = b:post_uri(post_uri,post_data)
\layout Standard
       
\layout Standard
       print("we received this webpage: ".. file)      
\layout Standard
       return POPSERVER_ERR_AUTH 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 First we create a browser object, then we build the 
\family typewriter 
post_uri
\family default 
 and 
\family typewriter 
post_data
\family default 
 using a simple 
\family typewriter 
string.format
\family default 
 (printf-like function).
 And this is the resulting request
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
POST / HTTP/1.1 
\layout Standard
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040322 Firefox/0.8
\layout Standard
Pragma: no-cache 
\layout Standard
Accept: */* 
\layout Standard
Host: localhost 
\layout Standard
Content-Length: 35 
\layout Standard
Content-Type: application/x-www-form-urlencoded
\layout Standard

\layout Standard
username=test@foo.xx&password=hello 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

that is essentially the same (we should url-encode the post data with 
\family typewriter 
curl.escape()
\family default 
) we wanted to do.
 We saved the browser object to the global table, since we want to use the
 same browser all the time.
\layout Standard

Now that we have logged in, we want to check the resulting page, and maybe
 extract a session ID that will be used later.
 This is the code to extract the session id and the HTML page we have received
 in response to the login request
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim} 
\layout Standard
        ... the same as before here ...
\layout Standard
     
\layout Standard
        print("we received this webpage: ".. file)
\layout Standard
        
\layout Standard
        -- search the session ID        
\layout Standard
        local _,_,id = string.find(file,"session_id=(%w+)")
\layout Standard

\layout Standard
        if id == nil then               
\layout Standard
               return POPSERVER_ERR_AUTH
\layout Standard
        end
\layout Standard

\layout Standard
        foo_globals.session_id = id
\layout Standard
        return POPSERVER_ERR_OK
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 and this is the returned web page.
\newline 

\begin_inset Graphics
	filename logindone.eps
	lyxscale 50
	scale 80

\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
<html> 
\layout Standard
<head> 
\layout Standard
<title>foo.xx webmail</title> 
\layout Standard
</head> 
\layout Standard
<body style="background-color : grey; color : white"> 
\layout Standard
<h1>Webmail - test@foo.xx</h1> 
\layout Standard
Login done! click here to view the inbox folder. 
\layout Standard
<a href="http://localhost:3000/inbox.php?session_id=ABCD1234">inbox</a> 
\layout Standard
</body> 
\layout Standard
</html>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

 Note that we extracted the session ID string using 
\newline 

\family typewriter 
string.find(file,
\begin_inset Quotes erd
\end_inset 

session_id=(%w+)
\begin_inset Quotes erd
\end_inset 

)
\family default 
.
 This is a really important function in the lua library and, even if it
 is described in the lua tutorial at HTTP://lua-users.org, we will talk a
 bit about captures here.
 Look at the page source.
 We are interested in the line 
\emph on 

\newline 

\family typewriter 
\emph default 
<a href="HTTP://localhost:3000/inbox.php?session_id=ABCD1234">inbox</a>
\family default 
 
\emph on 

\newline 

\emph default 
that contains the session_id we want to capture.
 Our expression is 
\family typewriter 
\emph on 
session_id=(%w+)
\family default 
\emph default 
 that means we want to match all the strings that start with 
\family typewriter 
session_id=
\family default 
 and than continue with one or more alphanumerical character.
 Since we wrote 
\family typewriter 
%w+
\family default 
 in round brackets, we mean to capture the content of brackets (the alphanumeric
al part).
 So string.find will return 3 values, the first two are ignored (assigned
 to the dummy variable 
\family typewriter 
_
\family default 
) while the third is the captured string (in our case 
\family typewriter 
ABCD1234
\family default 
).
 The LUA tutorial at lua-users is quite good and at HTTP://sf.net/projects/lua-us
ers you can find the LUA short reference that is a summary of all standard
 lua functions and is a really good piece of paper (so many thanks to Enrico
 Colombini).
 If you really like LUA you should buy THE book about LUA called 
\emph on 

\begin_inset Quotes eld
\end_inset 

Programming in Lua
\begin_inset Quotes erd
\end_inset 


\emph default 
 by Roberto Ierusalimschy (consider it the K&R for LUA).
\layout Subsubsection

(step 3) Getting the list of messages
\layout Standard

Now we have to implement the 
\family typewriter 
stat()
\family default 
 function.
 The stat is probably the most important function.
 It must retrieve the list of messages in the webmail and their UIDL and
 size.
 In our example we will use the mlex module to grab the important info from
 the page, but you can use the string LUA module to do the same with captures.
 This is our inbox page
\newline 

\begin_inset Graphics
	filename inbox.eps
	lyxscale 50
	scale 80

\end_inset 


\layout Standard

and this is the HTML body (only the first 2 messages are reported)
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
<h1>test@foo.xx - inbox (1/2)</h1> 
\layout Standard
<form name="inbox" method="post" action="/delete.php"> 
\layout Standard
<input type="hidden" name="session_id" value="ABCD1234"> 
\layout Standard
<table> 
\layout Standard
<tr><th>From</th><th>subject</th><th>size</th><th>date</th></tr> 
\layout Standard
<tr>        
\layout Standard
  <td><b>friend1@foo1.xx</b></td>         
\layout Standard
  <td><b><a href="/read.php?session_id=ABCD1234&uidl=123">ok!</a></b></td>
\layout Standard
  <td><b>20KB</b></td>
\layout Standard
  <td><b>today</b></td>   
\layout Standard
  <td><input type="checkbox" name="check_123"></td>
\layout Standard
</tr> 
\layout Standard
<tr>    
\layout Standard
  <td>friend2@foo2.xx</td>        
\layout Standard
  <td><a href="/read.php?session_id=ABCD1234&uidl=124">Re: hi!</a></td>  
\layout Standard
  <td>12KB</td>   
\layout Standard
  <td>yesterday</td>      
\layout Standard
  <td><input type="checkbox" name="check_124"></td> 
\layout Standard
</tr>
\layout Standard
</table> 
\layout Standard
<input type="submit" value="delete marked"> 
\layout Standard
</form> 
\layout Standard
<a href="/inbox.php?session_id=ABCD1234&page=2">go to next page</a> 
\layout Standard
</body> 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

We have retrieved the HTML using the browser and the 
\family typewriter 
get_uri()
\family default 
 method (remember the uri for the inbox was in the login page).
 As you can see the messages are in a table and this table has the same
 structure for each message.
 This is the place in which you may use mlex.
 Just take all the stuff between 
\family typewriter 
<tr>
\family default 
 and 
\family typewriter 
</tr>
\family default 
 of a message row and delete all but the tags name.
 Then replace every empty space (we call space the string between two tags)
 with a 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
.*
\family default 

\begin_inset Quotes erd
\end_inset 

.
 This is what we have obtained (it should be all in the same line, here
 is wrapped for lack of space) from the first message.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
.*<tr>.*<td>.*<b>.*</b>.*</td>.*<td>.*<b>.*<a>.*</a>.*</b>.*</td>.*
\layout Standard
<td>.*<b>.*</b>.*</td>.*<td>.*<b>.*</b>.*</td>.*
\layout Standard
<td>.*<input>.*</td>.*</tr>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

This expression is used to match the table row containing info about the
 message.
 Now cut and paste the line and replace every space and every tag with O
 (the letter, not the digit 0) or X.
 Put an X in the interesting fields (in our example the size and the input
 tag, that contains the message uidl).
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O
\layout Standard
<O>O<O>X<O>O<O>O<O>O<O>O<O>O<O>O
\layout Standard
<O>O<X>O<O>O<O>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

While the first expression will be used to match the table row, this one
 will be used to extract the important fields.
 This is the code that starts mlex on the HTML and fills the popstate data
 structure with the captured data.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Fill the number of messages and their size 
\layout Standard
function stat(pstate)
\layout Standard
      local file,err = nil, nil
\layout Standard
      local b = foo_globals.browser
\layout Standard
      file,err = b:get_uri("http://localhost:3000/inbox.php?session_id="..
\layout Standard
              foo_globals.session_id)
\layout Standard
      local e = ".*<tr>.*<td>.*<b>.*</b>.*</td>.*<td>.*<b>.*<a>"..               
\layout Standard
              ".*</a>.*</b>.*</td>.*<td>.*<b>.*</b>.*</td>.*<td>.*"..                
\layout Standard
              "<b>.*</b>.*</td>.*<td>.*<input>.*</td>.*</tr>"         
\layout Standard
      local g = "O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O<O>O"..              
\layout Standard
              "<O>O<O>X<O>O<O>O<O>O<O>O<O>O<O>O<O>O<X>O<O>O<O>"
\layout Standard
      local x = mlex.match(file,e,g) 
\layout Standard
      --debug print   
\layout Standard
      x:print()
\layout Standard

\layout Standard
      set_popstate_nummesg(pstate,x:count())
\layout Standard
      for i=1,x:count() do            
\layout Standard
              local _,_,size = string.find(x:get(0,i-1),"(%d+)")
\layout Standard
              local _,_,size_mult_k = string.find(x:get(0,i-1),"([Kk][Bb])")                        local _,_,size_mult_m = string.find(x:get(0,i-1),"([Mm][Bb])")
\layout Standard
              local _,_,uidl = string.find(x:get(1,i-1),"check_(%d+)")
\layout Standard
           
\layout Standard
              if size_mult_k ~= nil then
\layout Standard
                     size = size * 1024
\layout Standard
              end             
\layout Standard
              if size_mult_m ~= nil then
\layout Standard
                     size = size * 1024 * 1024
\layout Standard
              end             
\layout Standard
     
\layout Standard
              set_mailmessage_size(pstate,i,size)                     
\layout Standard
              set_mailmessage_uidl(pstate,i,uidl)
\layout Standard
      end
\layout Standard
 
\layout Standard
      return POPSERVER_ERR_OK
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

The result of 
\family typewriter 
x:print()
\family default 
 is the following
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
{'20KB','input type="checkbox" name="check_123"'}
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

and the telnet session follows
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
+OK FreePOPs/0.0.11 pop3 server ready 
\layout Standard
user test@foo.xx 
\layout Standard
+OK PLEASE ENTER PASSWORD 
\layout Standard
pass secret 
\layout Standard
+OK ACCESS ALLOWED 
\layout Standard
stat 
\layout Standard
+OK 1 20480 
\layout Standard
quit 
\layout Standard
+OK BYE BYE, UPDATING 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

We have not listed here how we added the dummy 
\family typewriter 
return
\family default 
 
\family typewriter 
POPSERVER_ERR_OK
\family default 
 line to the 
\family typewriter 
quit()
\family default 
 function.
 The source code listed before uses mlex to extract the two interesting
 strings, then parses them searching for the size and the size multiplier
 and the uidl.
 Then sets the mail message attributes.
 But here you can see that we just matched the first message.
 To match the other messages we have to inform the mlex module that the
 
\family typewriter 
<b>
\family default 
 tag is optional (you can see that only the first message is in bold).
 So we change the expressions to
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
.*<tr>.*<td>[.*]{b}.*{/b}[.*]</td>.*<td>[.*]{b}.*<a>.*</a>.*{/b}[.*]</td>.*
\layout Standard
<td>[.*]{b}.*{/b}[.*]</td>.*<td>[.*]{b}.*{/b}[.*]</td>.*
\layout Standard
<td>.*<input>.*</td>.*</tr>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

and
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
O<O>O<O>[O]{O}O{O}[O]<O>O<O>[O]{O}O<O>O<O>O{O}[O]<O>O
\layout Standard
<O>[O]{O}X{O}[O]<O>O<O>[O]{O}O{O}[O]<O>O
\layout Standard
<O>O<X>O<O>O<O>
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Now the stat command responds with 
\family typewriter 
+OK 4 45056
\family default 
 and the debug print is 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
{'20KB','input type="checkbox" name="check_123"'} 
\layout Standard
{'12KB','input type="checkbox" name="check_124"'} 
\layout Standard
{'10KB','input type="checkbox" name="check_125"'} 
\layout Standard
{'2KB','input type="checkbox" name="check_126"'}
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Now we have a proper function stat that fill the popstate data structure
 with the info the popserver needs to respond to a stat request.
 Since the list, uidl, list_all and uidl_all requests can be satisfied with
 the same data we will use the standard function provided by the common.lua
 module.
 It will be explained in the next step, but we have to add 2 important lines
 to the  
\family typewriter 
stat()
\family default 
 function, to avoid a double call.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
function stat(pstate) 
\layout Standard
       if foo_globals.stat_done == true then return POPSERVER_ERR_OK end
\layout Standard

\layout Standard
       ... the same code here ...
\layout Standard

\layout Standard
       foo_globals.stat_done = true
\layout Standard
       return POPSERVER_ERR_OK
\layout Standard
end
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Standard

The most important function is done, but a lot of notes must be written
 here.
 First, mlex is really comfortable sometimes, but you may find more helpful
 using the lua string library or the regularexp library (posix extended
 regular expressions) to reach the same point.
 Second, this implementation stops at the first inbox page.
 You should visit all the inbox pages maybe using the 
\family typewriter 
do_until()
\family default 
 function in the 
\family typewriter 
support.lua
\family default 
 library (that will be briefly described at the end of this tutorial).
 Third we make no error checking.
 For example the file variable may be nil and we must check these things
 to make a good plugin.
\layout Subsubsection

(step 4) The common functions
\layout Standard

The common module gives us some pre-cooked functions that depend only on
 a well implemented 
\family typewriter 
stat()
\family default 
 (I mean a stat than can be called more than once).
 This is our implementation of these functions 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Fill msg uidl field 
\layout Standard
function uidl(pstate,msg) return common.uidl(pstate,msg) end 
\layout Standard

\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Fill all messages uidl field 
\layout Standard
function uidl_all(pstate) return common.uidl_all(pstate) end 
\layout Standard

\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Fill msg size 
\layout Standard
function list(pstate,msg) return common.list(pstate,msg) end 
\layout Standard

\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Fill all messages size 
\layout Standard
function list_all(pstate) return common.list_all(pstate) end 
\layout Standard

\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Unflag each message merked for deletion 
\layout Standard
function rset(pstate) return common.rset(pstate) end
\layout Standard

\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Mark msg for deletion 
\layout Standard
function dele(pstate,msg) return common.dele(pstate,msg) end 
\layout Standard

\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Do nothing 
\layout Standard
function noop(pstate) return common.noop(pstate) end 
\layout Standard

\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

but first add the common module loading code to your 
\family typewriter 
init()
\family default 
 function
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
        ... the same code ..
\layout Standard

\layout Standard
        -- the common module    
\layout Standard
        if freepops.dofile("common.lua") == nil then
\layout Standard
                  return POPSERVER_ERR_UNKNOWN    
\layout Standard
        end 
\layout Standard

\layout Standard
        -- checks on globals    
\layout Standard
        freepops.set_sanity_checks()    
\layout Standard

\layout Standard
        return POPSERVER_ERR_OK 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Subsubsection

(step 5) Deleting messages
\layout Standard

Deleting messages is usually a normal post and an example of the 
\family typewriter 
post_data
\family default 
 is 
\family typewriter 
session_id=ABCD1234&check_124=on&check_126=on
\family default 
.
 The code follows
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Update the mailbox status and quit 
\layout Standard
function quit_update(pstate)
\layout Standard
      -- we need the stat
\layout Standard
      local st = stat(pstate)
\layout Standard
      if st ~= POPSERVER_ERR_OK then return st end
\layout Standard
         
\layout Standard
      -- shorten names, not really important  
\layout Standard
      local b = foo_globals.b         
\layout Standard
      local post_uri = b:wherearewe() .. "/delete.php"        
\layout Standard
      local session_id = foo_globals.session_id       
\layout Standard
      local post_data = "session_id=" .. session_id .. "&"
\layout Standard
    
\layout Standard
      -- here we need the stat, we build the uri and we check if we   
\layout Standard
      -- need to delete something     
\layout Standard
    
\layout Standard
      local delete_something = false; 
\layout Standard
      for i=1,get_popstate_nummesg(pstate) do                 
\layout Standard
             if get_mailmessage_flag(pstate,i,MAILMESSAGE_DELETE) then                                            post_data = post_data .. "check_" .. 
\layout Standard
                        get_mailmessage_uidl(pstate,i).. "=on&"                             
\layout Standard
                    delete_something = true                 
\layout Standard
             end     
\layout Standard
      end
\layout Standard
    
\layout Standard
      if delete_something then                
\layout Standard
             b:post_uri(post_uri,post_data)  
\layout Standard
      end
\layout Standard
    
\layout Standard
      return POPSERVER_ERR_OK 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Consider we do the post only if at least one message is marked for deletion.
 Another important think to keep in mind is that making only one post for
 all messages is better than making a single post for each message.
 When it is possible you should reduce the number of HTTP requests as much
 as you can since it is here we move FreePOPs from a rabbit to a tortoise.
\layout Subsubsection

(step 6) Downloading messages
\layout Standard

You may ask why I talk about this only at point 6, while having the mail
 is probably what you want from a plugin.
 Implementing the 
\family typewriter 
retr()
\family default 
 function is usually simple.
 It really depends on the webmail, but here we will talk of the simple case,
 while at the end of the tutorial you will see how to deal with complex
 webmails.
 The simple case is the one in which the webmail has a save message button.
 And the saved message is a plain text file containing both the header and
 the body of the message.
 There are only two interesting points in this case, firstly big messages,
 secondly the dot issue.
\layout Standard

Big messages are a cause of timeout.
 Yes, the most simple way of downloading a message is calling 
\family typewriter 
b:get_uri()
\family default 
 and store the message in a variable, and then send it to the mail client
 with 
\family typewriter 
popserver_callback()
\family default 
.
 But think that a 5MB mail, downloaded with a 640Kbps DSL connection, at
 full 80KBps speed, takes 64 seconds to download.
 This means your plugin will not send any data to the mail client for more
 than one minute and this will make the mail client to disconnect from FreePOPs
  thinking the POP3 server is dead.
 So we must send the data to the mail client as soon as we can.
 For this we have the 
\family typewriter 
b:pipe_uri()
\family default 
 function that calls a callback whenever it has some fresh data.
 The following code is the callback factory function, that creates a new
 callback to pass to the 
\family typewriter 
pipe_uri
\family default 
 browser method.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-------------------------------------------------------------------------------- 
\layout Standard
-- The callback factory for retr 
\layout Standard
-- 
\layout Standard
function retr_cb(data)
\layout Standard
        local a = stringhack.new() 
\layout Standard
        return function(s,len)
\layout Standard
                s = a:dothack(s).."
\backslash 
0"          
\layout Standard
                popserver_callback(s,data)              
\layout Standard
                return len,nil
\layout Standard
        end
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Here you see that the callback simply uses 
\family typewriter 
popserver_callback()
\family default 
 to pass the data to the mail client, but before doing this it mangles the
 data with the stringhack.
 But this is the second interesting point.
\layout Standard

The POP3 protocol should end the retr command answer with a line that contains
 only 3 bytes, 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
.
\backslash 
r
\backslash 
n
\family default 

\begin_inset Quotes erd
\end_inset 

.
 But what if a line, inside the mail body, is a simple point? We have to
 escape it to 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
..
\backslash 
r
\backslash 
n
\family default 

\begin_inset Quotes erd
\end_inset 

.
 This is not so hard, a 
\family typewriter 
string.gsub(s,
\begin_inset Quotes erd
\end_inset 


\backslash 
r
\backslash 
n.
\backslash 
r
\backslash 
n
\begin_inset Quotes erd
\end_inset 

,
\begin_inset Quotes erd
\end_inset 


\backslash 
r
\backslash 
n..
\backslash 
r
\backslash 
n
\begin_inset Quotes erd
\end_inset 

)
\family default 
 is all we need...
 but not in the case of callbacks.
 The send callback will be called with some fresh data, and called more
 than once if the mail is big.
 And if the searched pattern is truncated between two calls the 
\family typewriter 
string.gsub()
\family default 
 method will fail.
 This is why the stringhack module helps us.
 The 
\family typewriter 
a
\family default 
 object lives as long as the callback function will be called (see the closure
 page of the lua tutorial) and will keep in mind that the searched pattern
 may be truncated.
\layout Standard

Finally the 
\family typewriter 
retr()
\family default 
 code
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Get message msg, must call  
\layout Standard
-- popserver_callback to send the data 
\layout Standard
function retr(pstate,msg,pdata)          
\layout Standard
        -- we need the stat
\layout Standard
        local st = stat(pstate)
\layout Standard
        if st ~= POPSERVER_ERR_OK then return st end 
\layout Standard
    
\layout Standard
        -- the callback
\layout Standard
        local cb = retr_cb(data) 
\layout Standard
     
\layout Standard
        -- some local stuff
\layout Standard
       local session_id = foo_globals.session_id
\layout Standard
       local b = internal_state.b
\layout Standard
       local uri = b:wherearewe() .. "/download.php?session_id="..session_id..
\layout Standard
                "&message="..get_mailmessage_uidl(pstate,msg) 
\layout Standard

\layout Standard
        -- tell the browser to pipe the uri using cb
\layout Standard
        local f,rc = b:pipe_uri(uri,cb)
\layout Standard
        if not f then
\layout Standard
                log.error_print("Asking for "..uri.."
\backslash 
n")
\layout Standard
                log.error_print(rc.."
\backslash 
n")
\layout Standard
                return POPSERVER_ERR_NETWORK
\layout Standard
        end
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Subsubsection

(step 7) Test it
\layout Standard

Making a good plugin needs a lot of testing.
 You should ask for betha testers at the FreePOPs forum (HTTP://freepops.diludovi
co.it) and ask the software authors to include it in the main distribution.
 You should also read the webmail contract, check if there is something
 like 
\begin_inset Quotes eld
\end_inset 


\emph on 
I'll never use webmail->pop3 server to read my mail
\emph default 

\begin_inset Quotes erd
\end_inset 

 and send a copy to the authors of the software.
\layout Subsubsection

(step 8) The so mentioned last part of the tutorial
\layout Standard

There are a lot of things we have omitted here.
\layout Description

The\SpecialChar ~
multi-page\SpecialChar ~
stat is the real good implementation for 
\family typewriter 
stat()
\family default 
.
 We mentioned before that our implementation lists only the messages in
 the first page.
 The code for parsing and extracting interesting info from a page is already
 written, we simply need a function that checks if we are in the last page
 and if not it changes the value of a 
\family typewriter 
uri
\family default 
 variable.
 The 
\family typewriter 
uri
\family default 
 variable will be used by the fetch function.
 In this case you should use the support module with the do_until cycle.
 This is a simple example of 
\family typewriter 
do_until()
\family default 
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- -------------------------------------------------------------------------- -- 
\layout Standard
-- Fill the number of messages and their size 
\layout Standard
function stat(pstate)
\layout Standard
        ... some code as before ...
\layout Standard

\layout Standard
        -- this string will contain the uri to get. it may be updated by        
\layout Standard
        -- the check_f function, see later      
\layout Standard
        local uri = string.format(libero_string.first,popserver,session_id)
\layout Standard

\layout Standard
        -- The action for do_until      
\layout Standard
        --      
\layout Standard
        -- uses mlex to extract all the messages uidl and size  
\layout Standard
        local function action_f (s)
\layout Standard
                 -- calls match on the page s, with the mlexpressions
\layout Standard
                 -- statE and statG              
\layout Standard
                 local x = mlex.match(s,e,g)                 
\layout Standard
               
\layout Standard
                 -- the number of results                
\layout Standard
                 local n = x:count()
\layout Standard
                
\layout Standard
                 if n == 0 then return true,nil end
\layout Standard
 
\layout Standard
                 -- this is not really needed since the structure                
\layout Standard
                 -- grows automatically... maybe... don't remember now 
\layout Standard
                 local nmesg_old = get_popstate_nummesg(pstate)
\layout Standard
                 local nmesg = nmesg_old + n 
\layout Standard
                 set_popstate_nummesg(pstate,nmesg)
\layout Standard
      
\layout Standard
                 -- gets all the results and puts them in the popstate structure                              for i = 1,n do                        
\layout Standard
                         ... some code as before ...
\layout Standard
 
\layout Standard
                         set_mailmessage_size(pstate,i+nmesg_old,size)                     
\layout Standard
                         set_mailmessage_uidl(pstate,i+nmesg_old,uidl)           
\layout Standard
                 end     
\layout Standard
                
\layout Standard
                 return true,nil         
\layout Standard
        end
\layout Standard
        
\layout Standard
        -- check must control if we are not in the last page and        
\layout Standard
        -- eventually change uri to tell retrive_f the next page to retrive     
\layout Standard
        local function check_f (s)              
\layout Standard
                 local tmp1,tmp2 = string.find(s,next_check)              
\layout Standard
                 if tmp1 ~= nil then                     
\layout Standard
                          -- change retrive behaviour                     
\layout Standard
                          uri = "--build the uri for the next page--"
\layout Standard

\layout Standard
                          -- continue the loop
\layout Standard
                          return false       
\layout Standard
                 else
\layout Standard
                          return true
\layout Standard
                 end
\layout Standard
        end
\layout Standard

\layout Standard
        -- this is simple and uri-dependent
\layout Standard
        local function retrive_f ()
\layout Standard
                 local f,err = b:get_uri(uri)
\layout Standard
                 if f == nil then 
\layout Standard
                         return f,err
\layout Standard
                 end
\layout Standard
      
\layout Standard
                 local _,_,c = string.find(f,"--timeout string--")
\layout Standard
                 if c ~= nil then
\layout Standard
                         internal_state.login_done = nil                                
\layout Standard
                         session.remove(key())
\layout Standard
                         local rc = libero_login()                       
\layout Standard
                         if rc ~= POPSERVER_ERR_OK then                          
\layout Standard
                                 return nil,"Session ended,unable to recover"                                         end             
\layout Standard
                        
\layout Standard
                         uri = "--uri for the first page--"      
\layout Standard
                         return b:get_uri(uri)           
\layout Standard
                  end     
\layout Standard
               
\layout Standard
                  return f,err    
\layout Standard
        end
\layout Standard

\layout Standard
        -- initialize the data structure
\layout Standard
        set_popstate_nummesg(pstate,0)
\layout Standard
 
\layout Standard
        -- do it        
\layout Standard
        if not support.do_until(retrive_f,check_f,action_f) then
\layout Standard
                  log.error_print("Stat failed
\backslash 
n")
\layout Standard
                  session.remove(key())           
\layout Standard
                  return POPSERVER_ERR_UNKNOWN    
\layout Standard
        end
\layout Standard
        
\layout Standard
        -- save the computed values     
\layout Standard
        internal_state["stat_done"] = true 
\layout Standard
        return POPSERVER_ERR_OK 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

The only strange things are the retrieve function and the session saving
 stuff.
 Since webmail sometimes timeout you should check if the retrieved page
 is valid or not, and eventually retry the login.
 The session saving is the next issue.
\layout Description

Saving\SpecialChar ~
the\SpecialChar ~
session is the way to make FreePOPs really similar to a browser.
 This means the next time you check the mail FreePOPs will simply reload
 the inbox page and won't login again.
 To do this you need a 
\family typewriter 
key()
\family default 
 function that gives a unique ID for each session
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-------------------------------------------------------------------------------- 
\layout Standard
-- The key used to store session info 
\layout Standard
-- 
\layout Standard
-- This key must be unique for all webmails, since the session pool is one  
\layout Standard
-- for all the webmails 
\layout Standard
-- 
\layout Standard
function key()
\layout Standard
        return foo_globals.username .. foo_globals.password
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

and a 
\family typewriter 
foo_globals
\family default 
 serialization function
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-------------------------------------------------------------------------------- 
\layout Standard
-- Serialize the internal state 
\layout Standard
-- 
\layout Standard
-- serial.serialize is not enough powerful to correcly serialize the  
\layout Standard
-- internal state. The field b is the problem. b is an object. This means 
\layout Standard
-- that it is a table (and no problem for this) that has some field that are 
\layout Standard
-- pointers to functions. this is the problem. there is no easy way for the  
\layout Standard
-- serial module to know how to serialize this. so we call b:serialize  
\layout Standard
-- method by hand hacking a bit on names 
\layout Standard
-- 
\layout Standard
function serialize_state()   
\layout Standard
        internal_state.stat_done = false; 
\layout Standard
        return serial.serialize("foo_globals",foo_globals) ..            
\layout Standard
                internal_state.b:serialize("foo_globals.b") 
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

Now you have to tell FreePOPs to save the state in the 
\family typewriter 
quit_update()
\family default 
 function and load it back in the 
\family typewriter 
pass()
\family default 
 one.
 This is the new 
\family typewriter 
pass()
\family default 
 structure
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
function pass(pstate,password)  
\layout Standard
        -- save the password
\layout Standard
        internal_state.password = password
\layout Standard

\layout Standard
        -- eventually load session
\layout Standard
        local s = session.load_lock(key())
\layout Standard

\layout Standard
        -- check if loaded properly
\layout Standard
        if s ~= nil then
\layout Standard
                 -- "
\backslash 
a" means locked
\layout Standard
                 if s == "
\backslash 
a" then
\layout Standard
                          log.say("Session for "..internal_state.name..
\layout Standard
                              " is already locked
\backslash 
n")
\layout Standard
                          return POPSERVER_ERR_LOCKED
\layout Standard
                 end 
\layout Standard
     
\layout Standard
                 -- load the session
\layout Standard
                 local c,err = loadstring(s)
\layout Standard
                 if not c then
\layout Standard
                          log.error_print("Unable to load saved session: "..err)
\layout Standard
                          return foo_login()
\layout Standard
                 end     
\layout Standard
       
\layout Standard
                 -- exec the code loaded from the session string
\layout Standard
                 c()
\layout Standard

\layout Standard
                log.say("Session loaded for " .. internal_state.name .. "@" ..
\layout Standard
                         internal_state.domain ..
\layout Standard
                         "(" .. internal_state.session_id .. ")
\backslash 
n")      
\layout Standard

\layout Standard
                return POPSERVER_ERR_OK
\layout Standard
        else
\layout Standard
                -- call the login procedure
\layout Standard
                return foo_login()
\layout Standard
        end
\layout Standard
end 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 

where 
\family typewriter 
foo_login()
\family default 
 is the old 
\family typewriter 
pass()
\family default 
 function with minor changes.
 Don't forget to call 
\family typewriter 
session.unlock(key())
\family default 
 in the 
\family typewriter 
quit()
\family default 
 function, since you have to release the session in case of failure (and
 
\family typewriter 
quit()
\family default 
 is called here) and to save the session in 
\family typewriter 
quit_update()
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
linespread{0.5}
\layout Standard

\backslash 
begin{footnotesize}
\layout Standard

\backslash 
begin{verbatim}
\layout Standard
-- save fails if it is already saved  
\layout Standard
session.save(key(),serialize_state(),session.OVERWRITE)
\layout Standard
-- unlock is useless if it have just been saved, but if we save
\layout Standard
-- without overwriting the session must be unlocked manually
\layout Standard
-- since it would fail instead overwriting
\layout Standard
session.unlock(key()) 
\layout Standard

\backslash 
end{verbatim}
\layout Standard

\backslash 
end{footnotesize}
\end_inset 


\layout Description

The\SpecialChar ~
top()\SpecialChar ~
function is a complex thing.
 I won't describe it in a complete way, but I suggest you to look at the
 
\family typewriter 
libero.lua
\family default 
 plugin if the web server that sends you the message source supports the
 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
Range:
\family default 

\begin_inset Quotes erd
\end_inset 

 HTTP request field, or the 
\family typewriter 
tin.lua
\family default 
 plugin if the server needs to be interrupted in a bad way.
 Remember that the 
\family typewriter 
top()
\family default 
 needs someone that counts the lines and here we have again the stringhack
 module that counts and may purge some lines.
\layout Description

The\SpecialChar ~
javascript is the hell of webmails.
 Javascripts can do anything and you have to read them to emulate what they
 do.
 For example they may add some cookies (and you'll have to do this by hand
 with the
\family typewriter 
 b:add_cookie()
\family default 
 as in tin.lua) or they may change some form fields (like in the 
\family typewriter 
libero.lua
\family default 
 login load balancing code).
\layout Description

The\SpecialChar ~
cookies are sweet enough for us, since the browser module will handle
 them for us.
\layout Description

The\SpecialChar ~
standard\SpecialChar ~
files are really system dependent.
 Under Windows you'll have to constantly look at the 
\family typewriter 
stderr.txt
\family default 
 and 
\family typewriter 
stdout.txt
\family default 
, while under Unix you will just have to start it with the 
\family typewriter 
-w
\family default 
 switch and look at the console.
\layout Description

The\SpecialChar ~
brute\SpecialChar ~
force is called ethereal.
 Sometimes things don't work in the right way and the only way to debug
 them is to activate curl debugging to see what FreePOPs does (
\family typewriter 
b.curl:setopt(curl.OPT_VERBOSE,1)
\family default 
) and sniff what a real browser does.
\layout Description

The\SpecialChar ~
open\SpecialChar ~
source\SpecialChar ~
way is the best way of having a good quality piece of software.
 This means you'll have to release really often your plugin in the development
 phase and interact much with your testers.
 Trust me it works, or read 
\begin_inset Quotes eld
\end_inset 


\emph on 
The cathedral and the bazaar
\emph default 

\begin_inset Quotes erd
\end_inset 

 by Eric Raymond.
\layout Description

The\SpecialChar ~
mimer\SpecialChar ~
module is really beta at the time of this tutorial, but is what
 you need if you are in the unlucky case of a webmail that has no save message
 button.
 The 
\family typewriter 
lycos.lua
\family default 
 plugin is an example of what it can do.
 The main interesting function is 
\family typewriter 
mimer.pipe_msg()
\family default 
 that takes a message header, a text body (in html o plain text format)
 and some attachments uris, that are downloaded on the fly, composed into
 a proper mail message and piped to the mail client.
\layout Section

Submitting a bug
\layout Standard

When you have problems or you think you have found a bug, please follow
 strictly this 
\emph on 
iter
\emph default 
:
\layout Enumerate

Update to the most recent version of FreePOPs.
\layout Enumerate

Try to reproduce the bug, if the bug is not easily reproducible we are out
 of luck.
 Something can still be tried: if the software crashed you could compile
 it from the sources, install valgrind, run freepopsd with valgrind and
 hope the error messages are interesting.
\layout Enumerate

Clean the log files
\layout Enumerate

Start FreePOPs with the -w switch
\layout Enumerate

Reproduce the bug
\layout Enumerate

Send to the developers the log, plus any other info like your system type
 and how to reproduce this bug.
\layout Section

FAQ
\layout Subsection*

How do I configure FreePOPs?
\layout Standard

You don't need to configure FreePOPs, you just have to change your mail
 client settings as described in the tutorial.
 Remember to set the POP3 server address to localhost, the server port to
 2000 and to set the username to your full email address.
\layout Standard

If you continue having problems after reading the manual and the tutorial
 you can post to the forum (usually in italian, but feel free to post in
 english).
\layout Subsection*

How much does it cost?
\layout Standard

FreePOPs is free software.
 You can download and use it for free.
\layout Subsection*

I've installed FreePOPs and properly configured my mail client, but I'm
 unable to send mail...?
\layout Standard

FreePOPs helps you only in receiving messages.
 To send mail you have to use the SMTP server of your network provider.
 If you don't know what SMTP to use, see your ISP website or call their
 tech support.
\layout Subsection*

This software is in beta stage..
 will I lose my mail?
\layout Standard

Nobody guarantees the software they write, even if you pay it a lot...
\layout Subsection*

How can I help the project?
\layout Standard

Use the source Luke...
 Sources are freely available, feel free to send us patches and bug reports.
\layout Standard

If you want, you can donate to the project via Sourceforge and Paypal.
\layout Standard

When you want to bugreport, check that you are using the latest version
 and don't forget to include:
\layout Itemize

FreePOPs's version number
\layout Itemize

The operating system you are running
\layout Itemize

Your mail client name and its version number
\layout Itemize

Most importantly THE LOG, generated with the -w option.
 Make sure that it doesn't contain any sensitive info you wouldn't like
 to disclose.
\layout Subsection*

Where is the log?
\layout Standard

It depends on the system you are using.
 On a GNU/Linux system it is probably in /var/log/freepops.
 On a Windows system the file log.txt is in the same folder of the FreePOPs
 executable
\layout Standard

Before sending the log make sure that it doesn't contain sensitive info
 you wouldn't like to disclose.
 Check that you have created the log by starting FreePOPs with the -w switch.
 We suggest you erase the log file, start FreePOPs with the switch and recreate
 the problem.
\layout Subsection*

How do I change FreePOPs's command line switches?
\layout Standard

On a Unix system you should know how to do this, just add the switches to
 the command you use to run FreePOPs (maybe from a script).
\layout Standard

On a Windows system you have to open with a right click the properties of
 the FreePOPs link in the Start menu and add the switches in the command
 line there.
\layout Subsection*

My "Antivirus" says FreePOPs is a virus!
\layout Standard

Stop using that mad antivirus :-) FreePOPs is Free Software, the source
 code is available on the website...
 this means we have nothing to hide.
\layout Standard

We suggest you download FreePOPs from the official site.
 The binaries distributed on the official website come from the freely available
 source code, downloading FreePOPs from any other source may mean trouble.
\layout Section

Authors
\layout Standard

This manual has been written by Enico Tassi 
\family typewriter 
<gareuselesinge@users.sourceforge.net>
\family default 
 and revised and translated by Nicola Cocchiaro 
\family typewriter 
<ncocchiaro@users.sourceforge.net>
\layout Subsection

Developers
\layout Standard

FreePOPs is developed by:
\layout Itemize

Enico Tassi 
\family typewriter 
<gareuselesinge@users.sourceforge.net>
\layout Itemize

Alessio Caprari 
\family typewriter 
<alessiofender@users.sourceforge.net>
\layout Itemize

Nicola Cocchiaro 
\family typewriter 
<ncocchiaro@users.sourceforge.net>
\layout Itemize

Simone Vellei 
\family typewriter 
<simone_vellei@users.sourceforge.net>
\layout Standard

Gmail.lua is developed by:
\layout Itemize

Rami Kattan <
\family typewriter 
rkattan@gmail.com
\family default 
> HTTP://www.kattanweb.com
\layout Standard

LiberoPOPs is developed by:
\layout Itemize

Enico Tassi 
\family typewriter 
<gareuselesinge@users.sourceforge.net>
\layout Itemize

Alessio Caprari 
\family typewriter 
<alessiofender@users.sourceforge.net>
\layout Itemize

Nicola Cocchiaro 
\family typewriter 
<ncocchiaro@users.sourceforge.net>
\layout Itemize

Simone Vellei 
\family typewriter 
<simone_vellei@users.sourceforge.net>
\layout Itemize

Giacomo Tenaglia 
\family typewriter 
<sonicsmith@users.sourceforge.net>
\layout Section

Thanks
\layout Standard

Special thanks goes to the users who tested the software, to the hackers
 who made it possible to have a free and reliable development environment
 as the Debian GNU/Linux system.
\the_end
