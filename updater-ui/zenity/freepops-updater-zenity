#!/bin/bash
#
# Adapted from freepops-updater-dialog
# Massimiliano Adamo <maxadamo@gmail.com>

#set -x
#set -e

# the return value of functions
RC=""


# XXX should be written at config time
CORE=${CORE:-`which freepopsd`}
FREEPOPS="$CORE -e updater.lua php"
PREAMBLE="zenity --window-icon=/usr/share/pixmaps/freepops-32.xpm"
GAUGE='--progress --text=%s --auto-close'
MESSAGE="--info --title %s --text=%s"
CHECKLIST="--list --checklist --print-column=2 --column= --column=name --column=description --text=%s" 

# command line argument parsing ##############################################

function parse_args() {
  if [ $# -ge 1 ]; then
    echo -e "\nUsage: freepops-updater-zenity\n\nRun the command without any option\n"
    exit 1
  fi
}

# tempfile handling, with garbage collection #################################
TODELETE=`tempfile`

function erase_tmp_files() {
  rm -f `cat $TODELETE` $TODELETE
}

function mk_temp(){
  local tmp=`tempfile`
  echo $tmp >> $TODELETE
  echo $tmp
}

trap erase_tmp_files EXIT SIGTERM SIGCHLD

# widgets ###################################################################

# text : string 
# items : file which lines are 'name desciption on/off'
# RC: file which lines are name
function checklist() {
	local text="$1"
	local items="$2"

	local CMD=`mk_temp`
	echo -n $PREAMBLE > $CMD
	printf -- " $CHECKLIST " "$text"  >> $CMD
	cat $items >> $CMD

	/bin/bash $CMD
}

# title, message : string
function message(){
	local title="$1"
	local message="$2"
	local CMD=`mk_temp`

	echo -n $PREAMBLE > $CMD
	printf -- " $MESSAGE " "$title" "$message" >> $CMD
	/bin/bash $CMD
}

# helper to access the metadata of a plugin ##################################
function field(){
	local data=$1
	local name=$2

	grep "^$2" $1 | sed "s/^$2 *: *//"
}

# the main has you ###########################################################
function main(){
parse_args "$@"
local AWK=`mk_temp`
cat > $AWK <<EOT
BEGIN { RS = "\n\n+"; FS = "\n"; }
{ 
  cmd = "mktemp -t tmp.freepops." NR ".XXXXXXXX";
  RS = "\n"; 
  cmd | getline tmp; 
  RS = "\n\n+"; 
  print \$0 > tmp; 
  print tmp; 
}
EOT
local ERR=`mk_temp`
local I=0
local CHECKLIST_INPUT=`mk_temp`
local FAILED=`mk_temp`
FILES=`$FREEPOPS fetch_modules_metadata 2>$ERR | awk -f $AWK`
# Workaround needed as the above command 
# doesn't have valid exit code other than 0
# We'll check how many files we have.
ARRAY=( $FILES )
if [ ${#ARRAY[@]} -le 1 ]; then
	$PREAMBLE --warning --title="Error" --text='Error fetching metadata!'
	$PREAMBLE --text-info --title="Error fetching metadata" --filename=${ARRAY[0]}
	exit 1
fi
# register temp files to the garbage collector
echo $FILES >> $TODELETE
N=`echo $FILES | wc -w `
local perc=0
local CMD=`mk_temp`
echo -n $PREAMBLE > $CMD
printf -- " $GAUGE " "'Checking for updates...'" >> $CMD
(for METADATA in $FILES; do
	((perc=$I \* 100 / $N))
	echo $perc
	local M=`field $METADATA module_name`
	local VREQ=`field $METADATA require_version`
	local VLOC=`field $METADATA local_version`
	local VUPS=`field $METADATA version`
	local URL=`field $METADATA url`
	local SHOULD=`field $METADATA should_update`
	local CAN=`field $METADATA can_update`
	local WHY=`field $METADATA why_cannot_update`
	if [ "$CAN" = "true" ]; then
		if [ "$SHOULD" = "true" ]; then
			echo -n TRUE $M "'$VLOC -> $VUPS'" ' ' >> $CHECKLIST_INPUT
		else
			M=$M
		fi
	else	
		if [ "$SHOULD" = "true" ]; then
			echo -n "$M: $WHY\n" >> $FAILED
		else
			M=$M
		fi
	fi
	((I=I+1))
done) | /bin/bash $CMD

if [ -s $CHECKLIST_INPUT ]; then
	local SELECTED=`mk_temp`
	checklist "'Select the plugins to update.'" $CHECKLIST_INPUT > $SELECTED

	local DOWNERR=`mk_temp`
	for X in `cat $SELECTED|tr '|' ' '`; do
		# Workaround needed as the following command doesn't have a
		# valid exit code other then 0 and prints out a blank line.
		# Blank line will be stripped with sed and errors will be sent to file
		exec 3> >($PREAMBLE --progress --pulsate --auto-close --text="Downloading '$X'")
		echo . >&3
		$FREEPOPS fetch_module $X 'true'|sed -e /^$/d >> $DOWNERR 2>&1
		exec 3>&-
	done
	if [ -s $DOWNERR ]; then
		$PREAMBLE --warning --title="Error" --text='Error fetching one\nor more modules!'
		$PREAMBLE --text-info --title="Error fetching modules(s)" --filename=$DOWNERR
		exit 1
	else
		$PREAMBLE --info --title="FreePOPs Updater" --text='Update completed succesfully!'
	fi
else
	message "'No updates available'" "'    Nothing to update!    '"
fi

if [ -s $FAILED ]; then
	message "'Some modules cannot be updated!'" "'`cat $FAILED`'"
fi

}

# here we go! ###############################################################
if [ -z `which zenity 2>/dev/null` ]; then
	echo "'zenity' utility not found."
	echo Please install the zenity package.
	exit 1
fi
if [ ! -x $CORE ]; then
	echo freepopsd not found.
	exit 1
fi
if [ -z $DISPLAY ]; then
  echo -e "\nSet your DISPLAY or use freepops-updater-dialog instead\n"
  exit 1
fi


main "$@"

# eof
